{"version":3,"sources":["Menu.js","Layout.js","Preview.js","YoutubeLink.js","Overview.js","App.js","serviceWorker.js","index.js"],"names":["MenuHeader","mode","theme","Item","key","layout","labelCol","span","wrapperCol","tailLayout","offset","Preview","props","useState","Title","title","settitle","Image","cover","setcover","useEffect","className","src","style","height","Option","Select","YoutubeLink","Link","setLink","setTitle","search","setsearch","marginTop","sm","lg","name","onFinish","values","id","link","split","axios","get","then","res","data","items","snippet","localized","thumbnail","thumbnails","high","url","label","rules","required","message","placeholder","size","float","width","value","type","shape","htmlType","Header","Layout","Content","Overview","Menu","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console"],"mappings":"oSAaeA,MATf,WACI,OACI,kBAAC,IAAD,CAAMC,KAAK,aAAaC,MAAM,QAC1B,kBAAC,IAAKC,KAAN,CAAWC,IAAI,KAAf,iBACA,kBAAC,IAAKD,KAAN,CAAWC,IAAI,KAAf,iB,oDCRCC,EAAS,CAClBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAGXE,EAAa,CAC1BD,WAAY,CAAEE,OAAO,EAAGH,KAAM,K,OC6BfI,MA1Bf,SAAiBC,GAAQ,IAAD,EACMC,mBAASD,EAAME,OADrB,mBACbC,EADa,KACNC,EADM,OAEMH,mBAASD,EAAMK,OAFrB,mBAEbC,EAFa,KAENC,EAFM,KASpB,OALAC,qBAAU,WACND,EAASP,EAAMK,OACfD,EAASJ,EAAME,SACjB,CAACF,EAAMK,QAGL,yBAAKI,UAAU,kBACX,kBAAC,IAAD,CAAMA,UAAU,wBACZ,kBAAC,IAAD,0BACW,OAAVH,EACM,kBAAC,IAAD,CAASI,IAAI,kCACb,kBAAC,IAAD,CAASA,IAAKJ,EAAOK,MAAO,CAACC,OAAO,WAE3C,kBAAC,IAAD,KACKT,M,kBCpBdU,EAAUC,IAAVD,OAwDQE,MAtDf,WAAwB,IAAD,EACId,mBAAS,MADb,mBACZe,EADY,KACPC,EADO,OAEahB,mBAAS,MAFtB,gCAGOA,mBAAS,OAHhB,mBAGZC,EAHY,KAGLgB,EAHK,OAISjB,oBAAS,GAJlB,mBAIZkB,EAJY,KAIJC,EAJI,KAqBnB,OACI,yBAAKT,MAAO,CAACU,UAAU,SACnB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKC,GAAG,KAAKC,GAAG,KACR,kBAAC,IAAD,eAAMC,KAAK,UAAa/B,EAAxB,CAAgCgC,SAnB/B,SAACC,GAClB,IACIC,EADUD,EAAOE,KACJC,MAAM,KAAK,GAC5BC,IAAMC,IAAN,8HAAiIJ,IAC3HK,MAAK,SAAAC,GACD,IAAI9B,EAAM8B,EAAIC,KAAKC,MAAM,GAAGC,QAAQC,UAAUlC,MAC1CmC,EAAYL,EAAIC,KAAKC,MAAM,GAAGC,QAAQG,WAAWC,KAAKC,IAC1DvB,EAASf,GACTc,EAAQqB,GACRlB,GAAU,SAWA,kBAAC,IAAK7B,KAAN,CAAWmD,MAAM,eAAelB,KAAK,OAAOmB,MAAO,CAAC,CAACC,UAAS,EAAMC,QAAQ,8BACpE,kBAAC,IAAD,CAAOC,YAAY,OAAOC,KAAK,YAGvC,kBAAC,IAAKxD,KAAN,CAAWmD,MAAM,WAAWlB,KAAK,YAC7B,kBAAC,IAAD,CAASsB,YAAY,kBAAkBnC,MAAO,CAACqC,MAAM,OAAOC,MAAM,MAC9D,kBAACpC,EAAD,CAAQqC,MAAM,WAAd,WACA,kBAACrC,EAAD,CAAQqC,MAAM,UAAd,UACA,kBAACrC,EAAD,CAAQqC,MAAM,cAAd,gBAGR,kBAAC,IAAK3D,KAASM,EACX,kBAAC,IAAD,CAAQsD,KAAK,UAAUC,MAAM,QAAQC,SAAS,UACzClC,EAAS,uCAAoB,2CAKlD,kBAAC,IAAD,CAAKG,GAAG,KAAKC,GAAG,KACZ,kBAAC,EAAD,CAASrB,MAAOA,EAAOG,MAAOW,SClD3CsC,EAAkBC,IAAlBD,OAAOE,EAAWD,IAAXC,QAkBCC,MAhBf,WACI,OACI,6BACA,kBAAC,IAAD,KACI,kBAACH,EAAD,KACI,kBAACI,EAAD,OAEJ,kBAACF,EAAD,CAAS7C,MAAO,CAACC,OAAO,SACpB,kBAAC,EAAD,UCFD+C,MARf,WACE,OACE,yBAAKlD,UAAU,OACb,kBAAC,EAAD,QCIcmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM/B,c","file":"static/js/main.23cf02cc.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Menu,Space} from 'antd';\r\n\r\n\r\nfunction MenuHeader() {\r\n    return (\r\n        <Menu mode=\"horizontal\" theme=\"dark\">\r\n            <Menu.Item key=\"1\">Youtube Link </Menu.Item>\r\n            <Menu.Item key=\"2\">Saved Links</Menu.Item>\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default MenuHeader\r\n","export const layout = {\r\n    labelCol: { span: 8 },\r\n    wrapperCol: { span: 16 },\r\n  };\r\n\r\nexport const tailLayout = {\r\nwrapperCol: { offset:8, span: 16 },\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Preview.css';\r\nimport { Card,\r\n    CardHeader,\r\n    CardTitle,\r\n    CardImg,\r\n    CardBody,\r\n    Button } from \"shards-react\";\r\n\r\nfunction Preview(props) {\r\n    const [title, settitle] = useState(props.Title);\r\n    const [cover, setcover] = useState(props.Image);\r\n\r\n    useEffect(()=>{\r\n        setcover(props.Image);\r\n        settitle(props.Title);\r\n    },[props.Image]);\r\n\r\n    return (\r\n        <div className=\"Preview-notice\">\r\n            <Card className=\"Preview-notice-inner\">\r\n                <CardHeader>Video Information</CardHeader>\r\n                {cover === null \r\n                    ? (<CardImg src=\"https://place-hold.it/300x200\" />)\r\n                    : (<CardImg src={cover} style={{height:\"300px\"}} />)\r\n                }\r\n                <CardBody>\r\n                    {title}\r\n                </CardBody>\r\n                \r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import React,{useState} from 'react';\r\nimport {Container,Row,Col} from 'shards-react';\r\nimport { Form, Input, Button ,Select} from \"antd\";\r\nimport {layout,tailLayout} from './Layout';\r\nimport Preview from './Preview';\r\nimport axios from 'axios';\r\n\r\nconst {Option} = Select;\r\n\r\nfunction YoutubeLink() {\r\n    const [Link,setLink] = useState(null);\r\n    const [Category, SetCategory] = useState(null);\r\n    const [Title, setTitle] = useState(null);\r\n    const [search, setsearch] = useState(true);\r\n    // console.log(Link,Title);\r\n\r\n    const handleSubmit = (values) =>{\r\n        let linkone = values.link;\r\n        let id = linkone.split(\"=\")[1];\r\n        axios.get(`https://www.googleapis.com/youtube/v3/videos?key=AIzaSyCQPdwWm__RUz9Hhh7GtVmmfYjTciYQxbk&part=snippet,statistics&id=${id}`)\r\n             .then(res =>{\r\n                  let title=res.data.items[0].snippet.localized.title;\r\n                  let thumbnail = res.data.items[0].snippet.thumbnails.high.url;\r\n                  setTitle(title)\r\n                  setLink(thumbnail)\r\n                  setsearch(false)\r\n                    })\r\n\r\n        // console.log(responseone.data);\r\n    }\r\n    return (\r\n        <div style={{marginTop:\"30px\"}}>\r\n            <Container>\r\n                <Row>\r\n                <Col sm=\"12\" lg=\"6\">\r\n                        <Form name=\"input \" {...layout} onFinish={handleSubmit}>\r\n                            <Form.Item label=\"Youtube Link\" name=\"link\" rules={[{required:true, message:\"The link cannot be empty\"}]}>\r\n                                    <Input placeholder=\"Link\" size=\"middle\"/>\r\n                            </Form.Item>\r\n                            \r\n                            <Form.Item label=\"Category\" name=\"category\" >\r\n                                <Select  placeholder=\"Select Category\" style={{float:\"left\",width:150}} >\r\n                                    <Option value=\"cooking\">Cooking</Option>\r\n                                    <Option value=\"Mobile\">Mobile</Option>\r\n                                    <Option value=\"Electrical\">Electrical</Option>\r\n                                </Select>\r\n                            </Form.Item>\r\n                            <Form.Item {...tailLayout}>\r\n                                <Button type=\"primary\" shape=\"round\" htmlType=\"submit\">\r\n                                    {search? (<div>Search</div>):(<div>Submit</div>)}\r\n                                </Button>\r\n                            </Form.Item>\r\n                        </Form>\r\n                </Col>\r\n                <Col sm=\"12\" lg=\"6\">\r\n                    <Preview Title={Title} Image={Link} />\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default YoutubeLink\r\n","import React from 'react';\r\nimport {Layout} from 'antd';\r\nimport MenuHeader from './Menu';\r\nimport YoutubeLink from './YoutubeLink';\r\n\r\nconst {Header,Content} = Layout\r\n\r\nfunction Overview() {\r\n    return (\r\n        <div>\r\n        <Layout>\r\n            <Header>\r\n                <MenuHeader/>\r\n            </Header>\r\n            <Content style={{height:\"100%\"}}>\r\n                <YoutubeLink/>\r\n            </Content>\r\n        </Layout>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Overview\r\n\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Overview from './Overview';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Overview/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"shards-ui/dist/css/shards.min.css\";\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}