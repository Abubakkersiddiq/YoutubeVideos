{"version":3,"sources":["Link.js","Preview.js","LinkAdd.js","App.js","serviceWorker.js","index.js"],"names":["Link","props","useState","undefined","link","setLink","url","setUrl","handleSearch","a","id","split","axios","get","responseone","data","items","length","onItemUpdate","htmlFor","className","onChange","e","target","value","pill","theme","onClick","Preview","Title","Image","cover","setcover","useEffect","src","style","height","LinkAdd","title","setTitle","image","setImage","marginTop","sm","lg","val","snippet","thumbnails","medium","App","type","expand","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6SAwCeA,MAnCf,SAAcC,GAAQ,IAAD,EACOC,wBAASC,GADhB,mBACVC,EADU,KACJC,EADI,OAEKH,mBAAS,IAFd,mBAEVI,EAFU,KAELC,EAFK,KAIXC,EAAY,uCAAE,8BAAAC,EAAA,6DAEZC,EADUJ,EACGK,MAAM,KAAK,GAFZ,SAGUC,IAAMC,IAAN,8HAAiIH,IAH3I,OAGVI,EAHU,OAIhBT,EAAQS,QACIX,IAATC,GAE+B,IAA3BA,EAAKW,KAAKC,MAAMC,QAEfhB,EAAMiB,aAAad,GATX,2CAAF,qDAalB,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,2BAAOe,QAAQ,OAAOC,UAAU,cAAhC,0BACA,kBAAC,IAAD,CAAWV,GAAG,OAAOW,SAAU,SAAAC,GAAC,OAAIf,EAAOe,EAAEC,OAAOC,UACpD,2BAAOL,QAAQ,OAAOC,UAAU,cAAhC,uBACA,kBAAC,IAAD,KACI,4BAAQI,MAAM,SAAd,WACA,4BAAQA,MAAM,UAAd,eAEJ,kBAAC,IAAD,CAAQC,MAAI,EAACC,MAAM,UAAUN,UAAU,WAAWO,QAASnB,GAA3D,c,OCCLoB,MAzBf,SAAiB3B,GAAQ,IAAD,EACMC,mBAASD,EAAM4B,OADrB,gCAEM3B,mBAASD,EAAM6B,QAFrB,mBAEbC,EAFa,KAENC,EAFM,KAQpB,OAJAC,qBAAU,WACND,EAAS/B,EAAM6B,SACjB,CAAC7B,EAAM6B,QAGL,yBAAKV,UAAU,kBACX,kBAAC,IAAD,CAAMA,UAAU,wBACZ,kBAAC,IAAD,0BACW,OAAVW,EACM,kBAAC,IAAD,CAASG,IAAI,kCACb,kBAAC,IAAD,CAASA,IAAKH,EAAMzB,IAAK6B,MAAO,CAACC,OAAO,WAE/C,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAYnC,EAAM4B,WCDvBQ,MArBf,WAAoB,IAAD,EACMnC,mBAAS,WADf,mBACVoC,EADU,KACJC,EADI,OAEQrC,mBAAS,MAFjB,mBAEVsC,EAFU,KAEJC,EAFI,KAIjB,OACE,yBAAKN,MAAO,CAACO,UAAU,SACf,kBAAC,IAAD,KACI,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAKC,GAAG,KAAKC,GAAG,KACZ,kBAAC,EAAD,CAAM1B,aAAc,SAAC2B,GAAUN,EAASM,EAAI9B,KAAKC,MAAM,GAAG8B,QAAQR,OAAQG,EAASI,EAAI9B,KAAKC,MAAM,GAAG8B,QAAQC,WAAWC,YAE5H,kBAAC,IAAD,CAAKL,GAAG,KAAKC,GAAG,KACZ,kBAAC,EAAD,CAASf,MAAOS,EAAOR,MAAOU,SCCnCS,MAXf,WACE,OACE,yBAAK7B,UAAU,OACb,kBAAC,IAAD,CAAQ8B,KAAK,OAAOxB,MAAM,UAAUyB,OAAO,MACzC,kBAAC,IAAD,0BAEF,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,cCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.a36dd72e.chunk.js","sourcesContent":["import React ,{useState}from 'react';\r\nimport axios from 'axios';\r\nimport './Link.css';\r\nimport { Form, FormGroup, FormInput, FormSelect, Button } from \"shards-react\";\r\n\r\nfunction Link(props) {\r\n    const [link, setLink] = useState(undefined);\r\n    const [url, setUrl] = useState('');\r\n    \r\n    const handleSearch= async() =>{\r\n        let linkone = url;\r\n        let id = linkone.split(\"=\")[1];\r\n        const responseone = await axios.get(`https://www.googleapis.com/youtube/v3/videos?key=AIzaSyCQPdwWm__RUz9Hhh7GtVmmfYjTciYQxbk&part=snippet,statistics&id=${id}`)\r\n        setLink(responseone);\r\n        if(link !== undefined)\r\n        {\r\n            if(link.data.items.length !== 0 )\r\n            {\r\n                props.onItemUpdate(link);\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <Form>\r\n                <FormGroup>\r\n                    <label htmlFor=\"Link\" className=\"Link-input\">Enter the Youtube Link</label>\r\n                    <FormInput id=\"Link\" onChange={e => setUrl(e.target.value)}/>\r\n                    <label htmlFor=\"Link\" className=\"Link-input\">Choose the Category</label>\r\n                    <FormSelect>\r\n                        <option value=\"first\">Cooking</option>\r\n                        <option value=\"second\">Electrical</option>\r\n                    </FormSelect>\r\n                    <Button pill theme=\"primary\" className=\"margin20\" onClick={handleSearch}>Search</Button>\r\n                </FormGroup>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Link\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Preview.css';\r\nimport { Card,\r\n    CardHeader,\r\n    CardTitle,\r\n    CardImg,\r\n    CardBody,\r\n    Button } from \"shards-react\";\r\n\r\nfunction Preview(props) {\r\n    const [title, settitle] = useState(props.Title);\r\n    const [cover, setcover] = useState(props.Image);\r\n\r\n    useEffect(()=>{\r\n        setcover(props.Image);\r\n    },[props.Image]);\r\n\r\n    return (\r\n        <div className=\"Preview-notice\">\r\n            <Card className=\"Preview-notice-inner\">\r\n                <CardHeader>Video Information</CardHeader>\r\n                {cover === null \r\n                    ? (<CardImg src=\"https://place-hold.it/300x200\" />)\r\n                    : (<CardImg src={cover.url} style={{height:\"250px\"}} />)\r\n                }\r\n                <CardBody>\r\n                    <CardTitle>{props.Title}</CardTitle>\r\n                </CardBody>\r\n                \r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preview\r\n","import React ,{useState}from \"react\";\r\nimport { Container, Row, Col} from \"shards-react\";\r\nimport Link from './Link';\r\nimport Preview from './Preview';\r\nfunction LinkAdd() {\r\n  const [title,setTitle]=useState(\"No data\");\r\n  const [image,setImage] = useState(null);\r\n  \r\n  return (\r\n    <div style={{marginTop:\"50px\"}}>\r\n            <Container>\r\n                <Row>\r\n                <Col sm=\"12\" lg=\"6\">\r\n                    <Link onItemUpdate={(val) => { setTitle(val.data.items[0].snippet.title); setImage(val.data.items[0].snippet.thumbnails.medium) }}/>\r\n                </Col>\r\n                <Col sm=\"12\" lg=\"6\">\r\n                    <Preview Title={title} Image={image}/>\r\n                </Col>\r\n                </Row>\r\n            </Container>\r\n    \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LinkAdd;\r\n","import React from 'react';\r\nimport { Navbar, NavbarBrand } from \"shards-react\";\r\nimport './App.css';\r\n\r\nimport LinkAdd from './LinkAdd';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Navbar type=\"dark\" theme=\"primary\" expand=\"md\">\r\n        <NavbarBrand >Youtube Link App</NavbarBrand>\r\n      </Navbar>\r\n      <LinkAdd/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"shards-ui/dist/css/shards.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}